//contains all relevant functions for processing the api data
//on futrher development of these functions, this file should be split up in the individual functions
//for now this is not yet necessary

function processResults(res, road) {
    const roadObject = res.roads[road];
    const segments = res.roads[road].segments;

    for (const segment in segments) {
        const segmentObj = roadObject.segments[segment];

        if (segmentObj.jams != undefined) {
            for (let i = 0; i < segmentObj.jams.length; i++) {
                trafficJam(segmentObj, segmentObj.jams[i]);
            }
        }
        else if (segmentObj.roadworks != undefined) {
            for (let i = 0; i < segmentObj.roadworks.length; i++) {
                roadWorks(segmentObj, segmentObj.roadworks[i]);
            }
        }
        else if (segmentObj.radars != undefined) {
            for (let i = 0; i < segmentObj.radars.length; i++) {
                radar(segmentObj, segmentObj.radars[i]);
            }
        }
    }
}

/**
 * function for visualising all the needed data on a specific traffic jam
 * 
 * @param {*} jam - value for testing, used to read out the parent object
 * @param {*} jInfo - carries all the info from the current jam
 */
function trafficJam(jam, jInfo) {
    //decodes the polyline using a leaflet plugin
    var encoded = jInfo.polyline;
    var polyline = L.Polyline.fromEncoded(encoded);

    //array of colors for jam severity
    const colorArr = ["rgb(255, 153, 153)", "rgb(255, 102, 102)", "rgb(255, 51, 51)", "rgb(230, 0, 0)", "rgb(179, 0, 0)", "rgb(128, 0, 0)"];
    var color;

    //decides on the color based on the delays
    const delay = jInfo.delay / 60
    switch (true) {
        case (delay < 4):
            color = colorArr[0];
            break;
        case (delay < 7):
            color = colorArr[1];
            break;
        case (delay < 10):
            color = colorArr[2];
            break;
        case (delay < 14):
            color = colorArr[3]
            break;
        case (delay < 18):
            color = colorArr[4];
            break;
        case (delay >= 18):
            color = colorArr[5];
            break;
        default:
            color = "rgb(255, 83, 26)";
    }

    //draws the polyline on the right layer
    drawLine(polyline, color, jamLayer);

    // grabs a coord for the pin and sets the icon
    const middleLoc = polyline.getLatLngs()[Math.round((polyline.getLatLngs().length - 1) / 2)]
    const loc = middleLoc;
    var icon;

    //pick which icon is needed
    if (jInfo.incidentType == "road-closed") {
        icon = closedRoadIcon;
    }   else{
        icon = jamIcon;
    }

    //data displayed on popup
    data = "<b>"
        + (jInfo.incidentType + " ")
        + (typeof jInfo.road !== "undefined" ? jInfo.road + ":" : "")
        + "</b>"
        + "<br>"
        + (typeof jInfo.events[0] !== "undefined" ? jInfo.events[0].text : "")
        + (typeof jInfo.events[1] !== "undefined" ? ", " + jInfo.events[1].text : "")
        + (typeof jInfo.events[2] !== "undefined" ? ", " + jInfo.events[2].text : "")
        + (typeof jInfo.location !== "undefined" ? "<br><b>Location: </b>" + jInfo.location  : "")
        + (typeof jInfo.delay !== "undefined" ? "<br><b>Delay:</b> +" + jInfo.delay / 60 + "min" : "<br><b>Delay:</b> -")
        + (typeof jInfo.distance !== "undefined" ? "<br><b>Distance:</b> " + jInfo.distance / 1000 + "km" : "<br><b>Distance:</b> -")
        ;
    const popUp = data

    //draws the pin on the right layer
    drawPin(loc, icon, popUp, jamLayer);
}

/**
 * function for visualising all the needed data on a specific roadwork
 * 
 * @param {*} roadWorks -  value for testing, used to read out the parent object
 * @param {*} rwInfo - carries all the info from the current roadworks
 */
function roadWorks(roadWorks, rwInfo) {
    //draws polyline if available
    if (rwInfo.polyline != undefined) {
        var encoded = rwInfo.polyline;
        var polyline = L.Polyline.fromEncoded(encoded);

        drawLine(polyline, 'orange', roadworksLayer);
    }

    //sets location and icon for roadworks pin
    const loc = rwInfo.toLoc;
    const icon = roadWorksIcon

    //data displayed on popup
    data = "<b>"
        + (rwInfo.incidentType + " ")
        + (typeof rwInfo.road !== "undefined" ? rwInfo.road + ":" : "")
        + "</b>"
        + "<br>"
        + (typeof rwInfo.events[0] !== "undefined" ? rwInfo.events[0].text : "")
        + (typeof rwInfo.events[1] !== "undefined" ? ", " + rwInfo.events[1].text : "")
        + (typeof rwInfo.events[2] !== "undefined" ? ", " + rwInfo.events[2].text : "")
        + (typeof rwInfo.from !== "undefined" ? "<br><b>Location: </b>" + rwInfo.from : "<br><b>Location:</b> unknown")
        + (typeof rwInfo.reason !== "undefined" ? "<br><b>Reason: </b>" + rwInfo.reason : "<br><b>Reason:</b> unknown")
        
        ;
    const popUp = data

    //draws roadworks pin
    drawPin(loc, icon, popUp, roadworksLayer);


}

/**
 * function for visualising all the needed data on a specific radar location
 * 
 * @param {*} radar -  value for testing, used to read out the parent object
 * @param {*} rInfo - carries all the info from the current radar
 */
function radar(radar, rInfo) {
    //draws polyline if available
    if (rInfo.polyline != undefined) {
        var encoded = rInfo.polyline;
        var polyline = L.Polyline.fromEncoded(encoded);

        drawLine(polyline, 'blue', radarLayer);
    }

    //puts the directions of the radar into a single array
    var directions = [];
    for (const direction in rInfo.bounds) {
        directions.push(direction);
    };

    //sets location and icon for roadworks pin
    const loc = rInfo.loc;
    const icon = radarIcon;

    //data displayed on popup
    data = "<b>"
        + (rInfo.incidentType + " ")
        + (typeof rInfo.road !== "undefined" ? rInfo.road + ":" : "")
        + "</b>"
        + "<br>"
        + (typeof rInfo.events[0] !== "undefined" ? rInfo.events[0].text : "")
        + (typeof rInfo.events[1] !== "undefined" ? ", " + rInfo.events[1].text : "")
        + (typeof rInfo.events[2] !== "undefined" ? ", " + rInfo.events[2].text : "")
        + (typeof rInfo.from !== "undefined" ? "<br><b>Location: </b>" + rInfo.from : "<br><b>Location:</b> unknown")
        + (typeof rInfo.reason !== "undefined" ? "<b>, </b>" + rInfo.reason : "")
        + (typeof directions[0] !== "undefined" ? "<br><b>Directions: </b>" + directions[0] + ", " + directions[1] : "<br><b>Directions: </b> unknown")
        
        ;
    const popUp = data

    //draws the radar pin
    drawPin(loc, icon, popUp, radarLayer);
}



/**
 * adds the values to the traffic jams table
 * initially used DOM to create the table
 * dropped due to the small amount of data needing to be inserted
 * 
 * @param {Object} res - JSON returned object containing the results 
 */
function createTable(res) {
    

    document.getElementById('td1').innerHTML = res.totals.all.count;
    document.getElementById('td2').innerHTML = res.totals.all.delay + "min";
    document.getElementById('td3').innerHTML = res.totals.all.distance + 'km';
}